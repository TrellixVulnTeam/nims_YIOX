NIMS: Neurobiological Image Management System
=============================================

NIMS is a scientific data management system, specifically designed for neuroimaging data. It is implemented in Python, based on TurboGears. NIMS is open-source software, released under the MIT license (see below for details).


NIMS Development on Ubuntu
--------------------------

Set up a virtual python environment:

    sudo apt-get install build-essential python-dev python-setuptools python-virtualenv libncurses5-dev python-numpy python-imaging
    virtualenv --system-site-packages tg2
    source tg2/bin/activate

Install the TurboGears development tools:

    easy_install -i http://tg.gy/current tg.devtools

Clone NIMS from GitHub and install its dependencies:

    git clone git@github.com:cni/nims.git
    cd nims
    python setup.py develop

Optionally, add PostgreSQL and LDAP support:

    sudo apt-get install postgresql-client libpq-dev
    easy_install psycopg2

    sudo apt-get install libldap2-dev libsasl2-dev
    easy_install python-ldap

Generate a development database and start the paste web server:

    paster setup-app development.ini --name=nimsgears
    paster serve --reload development.ini


NIMS Deployment on FreeBSD and Apache
-------------------------------------

Set up a virtual python environment:

    portmaster devel/py-virtualenv
    virtualenv --no-site-packages /usr/local/www/tg2env
    source /usr/local/www/tg2env/bin/activate

Clone NIMS from GitHub and install its dependencies:

    easy_install -i http://tg.gy/current tg.devtools
    git clone git://github.com/cni/nims.git /usr/local/www/nims
    cd !$
    python setup.py develop

Add PostgreSQL and LDAP support:

    portmaster databases/postgresql91-client net/py-ldap2
    easy_install psycopg2
    CPATH=/usr/local/include:/usr/local/include/sasl LIBRARY_PATH=/usr/local/lib easy_install python-ldap

Generate the production database:

    # first, obtain or create production.ini
    paster setup-app production.ini

Configure and restart Apache:

    ln -s $PWD/apache.conf /usr/local/etc/apache22/Includes/nimsgears.conf
    /usr/local/etc/rc.d/apache22 restart


Populating the Database
-----------------------

Once you have the NIMS web gui running, you need a way to get data into NIMS. We use various utilities to pull data from the MR scanner and insert it into NIMS. We use a suite of python scripts (various reapers, sorter.py, scheduler.py and processor.py, all in nimsproc) to do this. The reapers (dicomreaper.py, pfilereaper.py) copy data from the scanner and put it in the NIMS staging area (stage\_path). The sorter moves data from the staging area into the NIMS storage area (store\_path) and creates database entries for the data files. The scheduler finds new datasets in the database and schedules processing jobs for them. The processor executes the scheduled jobs. Some processing steps involve finding peripheral data files associated with the dataset, such as phyio files that are archived on the scanner. This is also where nifti creation happens and image pyramids are generated. All these tools have nice command-line help, so usage should be self-explanatory.

You also need to run a process to maintain the shadow filesystem, which is a view into the data files that provides human-friendly paths to the data files that are based on the database (e.g., all datasets for an experiment "reading" will appear in a folder called "reading"). Each user gets their own shadow filesystem, and it allows them to have read-only access to the data through, e.g., scp. This shadow file system is rebuilt periodically to keep it in sync with the current DB structure. See nimsutil/symlinks.py.

We usually launch all these processes using screen, so we can connect to the screen session from anywhere to check on these daemon processes. We provide an example screenrc file that launches all the processes in separate screens (e.g., "screen -c reaper.screenrc").

Data are automatically organized by the sorter using the PatientID field from DICOM files (or the analogous field in the raw MR data files). The format of the Patient ID string is PI\_uid/experiment\_name.


License
-------

Copyright (c) 2012 Robert Dougherty

Copyright (c) 2012 Gunnar Schaefer

Copyright (c) 2012 Reno Bowen

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
