# @author:  Reno Bowen
#           Gunnar Schaefer

"""
SCU is a module that wraps the findscu and movescu commands that are part of
the DCMTK package.

Usage involves the instantiation of an SCU object which maintains knowledge of
the caller and callee (data requester and data source, respectively).

Specific Query objects are constructed (e.g.  SeriesQuery, if you intend to
search for or move a series) and passed to the .find or .move methods of an scu
object.

"""

import re
import shlex
import logging
import subprocess

RESPONSE_RE = re.compile("""
.*# Dicom-Data-Set
.*# Used TransferSyntax: (?P<transfer_syntax>.+)
(?P<dicom_cvs>(.*\(.+\n)+)""")
DICOM_CV_RE = re.compile(""".*\((?P<idx_0>[0-9a-f]{4}),(?P<idx_1>[0-9a-f]{4})\) (?P<type>\w{2}) (?P<value>.+)#[ ]*(?P<length>\d+),[ ]*(?P<n_elems>\d+) (?P<label>\w+)\n""")
MOVE_OUTPUT_RE = re.compile('.*Completed Suboperations +: ([a-zA-Z0-9]+)', re.DOTALL)


class SCU(object):

    """
    Primary workhorse for scu module.  Stores information required to
    communicate with the scanner during calls to .find(...) and .move(...).

    Instantiated with the host, port, and aet of the scanner, as well as the
    aec of the calling machine.  Incoming port is optional (default=port).

    """

    def __init__(self, host, port, aet, aec, incoming_port=None, log=None):
        self.host = host
        self.port = port
        self.aet = aet
        self.aec = aec
        self.incoming_port = incoming_port if incoming_port else port
        self.log = log if log else logging.getLogger('scu')

    def find(self, query):
        """
        Constructs a findscu query given the Query object.  Returns a list of
        Response objects.

        """
        cmd = 'findscu %s' % self.query_string(query)
        self.log.debug(cmd)
        try:
            output = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT)
        except Exception as ex:
            self.log.warning(ex)
        return get_response_list(output)

    def move(self, query, dest_path='.'):
        """
        Constructs a movescu query given the Query object to the specified path
        (default=cwd).  Returns the count of images successfully transferred.

        """
        cmd = 'movescu --verbose -od %s +P %s %s' % (dest_path, self.incoming_port, self.query_string(query))
        self.log.debug(cmd)
        output = ''
        try:
            output = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT)
        except Exception as ex:
            self.log.warning(ex)
            if output: self.log.warning(output)
        try:
            img_cnt = int(MOVE_OUTPUT_RE.match(output).group(1))
        except (ValueError, AttributeError):
            img_cnt = 0
        return img_cnt

    def query_string(self, query):
        """
        Converts a query into the relevant string to be appended to a findscu
        or movescu call.

        """
        return '-S -aet %s -aec %s %s %s %s' % (self.aet, self.aec, query, self.host, str(self.port))


class Query(object):

    """
    Generic query class - all others inherit from this.  Accepts retrieve level
    (e.g. 'Study'), and a series of keyword arguments to narrow down your query
    (e.g. StudyNumber: "500").

    """

    def __init__(self, retrieve_level, **kwargs):
        self.retrieve_level = retrieve_level
        self.kwargs = kwargs

    def __str__(self):
        string = '-k QueryRetrieveLevel="%s"' % self.retrieve_level
        for key, value in self.kwargs.items():
            string += ' -k %s="%s"' % (str(key), str(value))
        return string

    def __repr__(self):
        return 'Query<retrieve_level=%s, kwargs=%s>' % (self.retrieve_level, self.kwargs)


class StudyQuery(Query):
    def __init__(self, **kwargs):
        super(StudyQuery, self).__init__('Study', **kwargs)


class SeriesQuery(Query):
    def __init__(self, **kwargs):
        super(SeriesQuery, self).__init__('Series', **kwargs)


class ImageQuery(Query):
    def __init__(self, **kwargs):
        super(ImageQuery, self).__init__('Image', **kwargs)


class DicomCV(object):

    """
    Detailed DicomCV object.  Most fields are rarely (if ever used) aside from
    label and value.

    Since many of the fields aren't accessed, these sit in a dicom_cv_list
    within each Response object so they're available if necessary.

    """

    def __init__(self, dicom_cv_dict):
        self.idx = (dicom_cv_dict['idx_0'], dicom_cv_dict['idx_1'])
        self.value = dicom_cv_dict['value'].strip('[]= ')
        self.length = dicom_cv_dict['length']
        self.n_elems = dicom_cv_dict['n_elems']
        self.type_ = dicom_cv_dict['type']
        self.label = dicom_cv_dict['label']


class Response(dict):

    """
    Dictionary of CVs corresponding to one (of potentially many) responses
    generated by a findscu call.  Supports tab completion of dictionary
    elements as members.

    """

    def __init__(self, response_dict):
        dict.__init__(self)
        self.transfer_syntax = response_dict['transfer_syntax']
        self.dicom_cv_list = [DicomCV(match_obj.groupdict()) for match_obj in DICOM_CV_RE.finditer(response_dict['dicom_cvs'])]
        for cv in self.dicom_cv_list:
            self[cv.label] = cv.value

    def __dir__(self):
        """
        Returns list of dictionary elements for tab completion in utilities
        like iPython.

        """
        return [k for (k, v) in self.items()]

    def __getattr__(self, name):
        """
        Allows access of dictionary elements as members.

        """
        if name in self:
            return self[name]
        else:
            raise AttributeError, name


def get_response_list(string):
    """
    Accepts output string from findscu command, parsing it into a returned list of
    Response objects.

    """
    return [Response(match_obj.groupdict()) for match_obj in RESPONSE_RE.finditer(string)]
